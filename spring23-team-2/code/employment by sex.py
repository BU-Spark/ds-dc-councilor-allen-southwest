# -*- coding: utf-8 -*-
"""race.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nm5Kyits7KJ2mBmoMhUbz6wK67IT4OvV
"""

!pip install -U -q PyDrive

from pydrive.auth import GoogleAuth

from pydrive.drive import GoogleDrive

from google.colab import auth

from oauth2client.client import GoogleCredentials

  # Authenticate and create the PyDrive client.

auth.authenticate_user()

gauth = GoogleAuth()

gauth.credentials = GoogleCredentials.get_application_default()

drive = GoogleDrive(gauth)

link ='https://drive.google.com/file/d/1ZRpIhr41GN8LDe4rcNQNw-DZlRwby-tn/view?usp=share_link'
import pandas as pd

 # to get the id part of the file

id = link.split("/")[-2]

downloaded = drive.CreateFile({'id':id})

downloaded.GetContentFile('EMPLOYMENT STATUS ACSST5Y2021.S2301-2023-04-03T181932.csv') 

df2021 = pd.read_csv('EMPLOYMENT STATUS ACSST5Y2021.S2301-2023-04-03T181932.csv')

# Remove all columns containing "Margin" in the column name
df2021 = df2021.loc[:, ~df2021.columns.str.contains('Margin')]

# Save the modified DataFrame to a new CSV file
df2021.to_csv('employ 2021 new_file.csv', index=False)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
employ_2021_df = pd.read_csv("employ 2021 new_file.csv")

# Analysis of mean income
employ_2021_df.head()

link ='https://drive.google.com/file/d/15NEwfdAM5Br2-4MlGU7wrCCiveuEra8g/view?usp=share_link'
import pandas as pd

 # to get the id part of the file

id = link.split("/")[-2]

downloaded = drive.CreateFile({'id':id})

downloaded.GetContentFile('EMPLOYMENT STATUS ACSST5Y2020.S2301-2023-04-03T181935.csv') 

df2020 = pd.read_csv('EMPLOYMENT STATUS ACSST5Y2020.S2301-2023-04-03T181935.csv')

# Remove all columns containing "Margin" in the column name
df2020 = df2020.loc[:, ~df2020.columns.str.contains('Margin')]

# Save the modified DataFrame to a new CSV file
df2020.to_csv('employ 2020 new_file.csv', index=False)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
employ_2020_df = pd.read_csv("employ 2020 new_file.csv")

# Analysis of mean income
employ_2020_df.head()

link ='https://drive.google.com/file/d/1y8gDF0uabEoMaylD3gNOXL_kWPma6uTM/view?usp=share_link'
import pandas as pd

 # to get the id part of the file

id = link.split("/")[-2]

downloaded = drive.CreateFile({'id':id})

downloaded.GetContentFile('EMPLOYMENT STATUS ACSST5Y2019.S2301-2023-04-03T181938.csv') 

df2019 = pd.read_csv('EMPLOYMENT STATUS ACSST5Y2019.S2301-2023-04-03T181938.csv')

# Remove all columns containing "Margin" in the column name
df2019 = df2019.loc[:, ~df2019.columns.str.contains('Margin')]

# Save the modified DataFrame to a new CSV file
df2019.to_csv('employ 2019 new_file.csv', index=False)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
employ_2019_df = pd.read_csv("employ 2019 new_file.csv")

# Analysis of mean income
employ_2019_df.head()

link ='https://drive.google.com/file/d/1WteZ6jEBu2D9WI-drcHUfBgiTepH1xi3/view?usp=share_link'
import pandas as pd

 # to get the id part of the file

id = link.split("/")[-2]

downloaded = drive.CreateFile({'id':id})

downloaded.GetContentFile('EMPLOYMENT STATUS ACSST5Y2018.S2301-2023-04-03T181952.csv') 

df2018 = pd.read_csv('EMPLOYMENT STATUS ACSST5Y2018.S2301-2023-04-03T181952.csv')

# Remove all columns containing "Margin" in the column name
df2018 = df2018.loc[:, ~df2018.columns.str.contains('Margin')]

# Save the modified DataFrame to a new CSV file
df2018.to_csv('employ 2018 new_file.csv', index=False)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
employ_2018_df = pd.read_csv("employ 2018 new_file.csv")

# Analysis of mean income
employ_2018_df.head()

link ='https://drive.google.com/file/d/1SciqMjmaFVY1WmfIpPttp7LnL9hm0Hfr/view?usp=share_link'
import pandas as pd

 # to get the id part of the file

id = link.split("/")[-2]

downloaded = drive.CreateFile({'id':id})

downloaded.GetContentFile('EMPLOYMENT STATUS ACSST5Y2017.S2301-2023-04-03T181954.csv') 

df2017 = pd.read_csv('EMPLOYMENT STATUS ACSST5Y2017.S2301-2023-04-03T181954.csv')

# Remove all columns containing "Margin" in the column name
df2017 = df2017.loc[:, ~df2017.columns.str.contains('Margin')]

# Save the modified DataFrame to a new CSV file
df2017.to_csv('employ 2017 new_file.csv', index=False)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
employ_2017_df = pd.read_csv("employ 2017 new_file.csv")

# Analysis of mean income
employ_2017_df.head()

columns_2017 = list(employ_2017_df.columns)

# print the column names in a clear format
print("Column names:")
i = 0
for col in columns_2017: 
    #if "64" in col:
    print("- " + col)
    i = i+1
print(i)

"""Employment/Unempoymeny
Male/Female
9 eaces

4 lines
EM/EF/UM/UF
"""

employ_64_col = 'Census Tract 64, District of Columbia, District of Columbia!!Employment/Population Ratio!!Estimate'
total_64_col = 'Census Tract 64, District of Columbia, District of Columbia!!Total!!Estimate'
unemploy_64_col = 'Census Tract 64, District of Columbia, District of Columbia!!Unemployment rate!!Estimate'

df2021_64_df = df2021[[total_64_col, employ_64_col, unemploy_64_col]].iloc[24:26 , :]
df2021_64_df[employ_64_col]=df2021_64_df[employ_64_col].replace(regex=[r'\D+'], value="")
df2021_64_df[total_64_col]=df2021_64_df[total_64_col].replace(regex=[r'\D+'], value="")
df2021_64_df[unemploy_64_col]=df2021_64_df[unemploy_64_col].replace(regex=[r'\D+'], value="")
#2021
df2021_64_df = df2021_64_df.dropna(subset=[total_64_col, employ_64_col, unemploy_64_col])
df2021_64_df[total_64_col] = df2021_64_df[total_64_col].astype(int)
df2021_64_df.head()

df2020_64_df = df2020[[total_64_col, employ_64_col, unemploy_64_col]].iloc[24:26 , :]
df2020_64_df[employ_64_col]=df2020_64_df[employ_64_col].replace(regex=[r'\D+'], value="")
df2020_64_df[total_64_col]=df2020_64_df[total_64_col].replace(regex=[r'\D+'], value="")
df2020_64_df[unemploy_64_col]=df2020_64_df[unemploy_64_col].replace(regex=[r'\D+'], value="")
#2020
df2020_64_df = df2020_64_df.dropna(subset=[total_64_col, employ_64_col, unemploy_64_col])
df2020_64_df[total_64_col] = df2020_64_df[total_64_col].astype(int)
df2020_64_df.head()

df2019_64_df = df2019[[total_64_col, employ_64_col, unemploy_64_col]].iloc[24:26 , :]
df2019_64_df[employ_64_col]=df2019_64_df[employ_64_col].replace(regex=[r'\D+'], value="")
df2019_64_df[total_64_col]=df2019_64_df[total_64_col].replace(regex=[r'\D+'], value="")
df2019_64_df[unemploy_64_col]=df2019_64_df[unemploy_64_col].replace(regex=[r'\D+'], value="")
#2019
df2019_64_df = df2019_64_df.dropna(subset=[total_64_col, employ_64_col, unemploy_64_col])
df2019_64_df[total_64_col] = df2019_64_df[total_64_col].astype(int)
df2019_64_df.head()

df2018_64_df = df2018[[total_64_col, employ_64_col, unemploy_64_col]].iloc[24:26 , :]
df2018_64_df[employ_64_col]=df2018_64_df[employ_64_col].replace(regex=[r'\D+'], value="")
df2018_64_df[total_64_col]=df2018_64_df[total_64_col].replace(regex=[r'\D+'], value="")
df2018_64_df[unemploy_64_col]=df2018_64_df[unemploy_64_col].replace(regex=[r'\D+'], value="")
#2018
df2018_64_df = df2018_64_df.dropna(subset=[total_64_col, employ_64_col, unemploy_64_col])
df2018_64_df[total_64_col] = df2018_64_df[total_64_col].astype(int)
df2018_64_df.head()

df2017_64_df = df2017[[total_64_col, employ_64_col, unemploy_64_col]].iloc[24:26 , :]
df2017_64_df[employ_64_col]=df2017_64_df[employ_64_col].replace(regex=[r'\D+'], value="")
df2017_64_df[total_64_col]=df2017_64_df[total_64_col].replace(regex=[r'\D+'], value="")
df2017_64_df[unemploy_64_col]=df2017_64_df[unemploy_64_col].replace(regex=[r'\D+'], value="")
#2017
df2017_64_df = df2017_64_df.dropna(subset=[total_64_col, employ_64_col, unemploy_64_col])
df2017_64_df[total_64_col] = df2017_64_df[total_64_col].astype(int)
df2017_64_df.head()

df2017_64_list = df2017_64_df.values.tolist()
df2018_64_list = df2018_64_df.values.tolist()
df2019_64_list = df2019_64_df.values.tolist()
df2020_64_list = df2020_64_df.values.tolist()
df2021_64_list = df2021_64_df.values.tolist()

print(int(int(df2017_64_list[0][0]) * int(df2017_64_list[0][1])/1000))
print(int(df2017_64_list[0][0]))
print(int(df2017_64_list[0][1]) / 1000)

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
EM = []
EM.append(int(int(df2017_64_list[0][0]) * int(df2017_64_list[0][1])/1000)) 
EM.append(int(int(df2018_64_list[0][0]) * int(df2018_64_list[0][1])/1000))
EM.append(int(int(df2019_64_list[0][0]) * int(df2019_64_list[0][1])/1000))
EM.append(int(int(df2020_64_list[0][0]) * int(df2020_64_list[0][1])/1000))
EM.append(int(int(df2021_64_list[0][0]) * int(df2021_64_list[0][1])/1000))

UM = []
UM.append(int(int(df2017_64_list[0][0]) * int(df2017_64_list[0][2])/1000)) 
UM.append(int(int(df2018_64_list[0][0]) * int(df2018_64_list[0][2])/1000))
UM.append(int(int(df2019_64_list[0][0]) * int(df2019_64_list[0][2])/1000))
UM.append(int(int(df2020_64_list[0][0]) * int(df2020_64_list[0][2])/1000))
UM.append(int(int(df2021_64_list[0][0]) * int(df2021_64_list[0][2])/1000))

EF = []
EF.append(int(int(df2017_64_list[1][0]) * int(df2017_64_list[1][1])/1000)) 
EF.append(int(int(df2018_64_list[1][0]) * int(df2018_64_list[1][1])/1000))
EF.append(int(int(df2019_64_list[1][0]) * int(df2019_64_list[1][1])/1000))
EF.append(int(int(df2020_64_list[1][0]) * int(df2020_64_list[1][1])/1000))
EF.append(int(int(df2021_64_list[1][0]) * int(df2021_64_list[1][1])/1000))


UF = []
UF.append(int(int(df2017_64_list[1][0]) * int(df2017_64_list[1][2])/1000))
UF.append(int(int(df2018_64_list[1][0]) * int(df2018_64_list[1][2])/1000))
UF.append(int(int(df2019_64_list[1][0]) * int(df2019_64_list[1][2])/1000))
UF.append(int(int(df2020_64_list[1][0]) * int(df2020_64_list[1][2])/1000))
UF.append(int(int(df2021_64_list[1][0]) * int(df2021_64_list[1][2])/1000))

race_units = {
   'Emplyed Female': tuple(EF),
   'Emplyed Male': tuple(EM),
   'Unemployed Female' : tuple(UF),
   'Unemployed Male' : tuple(UM),
   }


   # Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.set_title('Employed & Unemployed Population Comparison by Sex, Data from Cencus Tract 64')
ax.set_xlabel('Year')
ax.set_ylabel('Population')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Move the legend outside of the plot area
ax.legend(bbox_to_anchor=(1.04,0.5), loc="center left", borderaxespad=0)

# Show the chart
plt.show()

employ_105_col = 'Census Tract 105, District of Columbia, District of Columbia!!Employment/Population Ratio!!Estimate'
total_105_col = 'Census Tract 105, District of Columbia, District of Columbia!!Total!!Estimate'
unemploy_105_col = 'Census Tract 105, District of Columbia, District of Columbia!!Unemployment rate!!Estimate'

df2021_105_df = df2021[[total_105_col, employ_105_col, unemploy_105_col]].iloc[24:26 , :]
df2021_105_df[employ_105_col]=df2021_105_df[employ_105_col].replace(regex=[r'\D+'], value="")
df2021_105_df[total_105_col]=df2021_105_df[total_105_col].replace(regex=[r'\D+'], value="")
df2021_105_df[unemploy_105_col]=df2021_105_df[unemploy_105_col].replace(regex=[r'\D+'], value="")
#2021
df2021_105_df = df2021_105_df.dropna(subset=[total_105_col, employ_105_col, unemploy_105_col])
df2021_105_df[total_105_col] = df2021_105_df[total_105_col].astype(int)

df2020_105_df = df2020[[total_105_col, employ_105_col, unemploy_105_col]].iloc[24:26 , :]
df2020_105_df[employ_105_col]=df2020_105_df[employ_105_col].replace(regex=[r'\D+'], value="")
df2020_105_df[total_105_col]=df2020_105_df[total_105_col].replace(regex=[r'\D+'], value="")
df2020_105_df[unemploy_105_col]=df2020_105_df[unemploy_105_col].replace(regex=[r'\D+'], value="")
#2020
df2020_105_df = df2020_105_df.dropna(subset=[total_105_col, employ_105_col, unemploy_105_col])
df2020_105_df[total_105_col] = df2020_105_df[total_105_col].astype(int)

df2019_105_df = df2019[[total_105_col, employ_105_col, unemploy_105_col]].iloc[24:26 , :]
df2019_105_df[employ_105_col]=df2019_105_df[employ_105_col].replace(regex=[r'\D+'], value="")
df2019_105_df[total_105_col]=df2019_105_df[total_105_col].replace(regex=[r'\D+'], value="")
df2019_105_df[unemploy_105_col]=df2019_105_df[unemploy_105_col].replace(regex=[r'\D+'], value="")
#2019
df2019_105_df = df2019_105_df.dropna(subset=[total_105_col, employ_105_col, unemploy_105_col])
df2019_105_df[total_105_col] = df2019_105_df[total_105_col].astype(int)

df2018_105_df = df2018[[total_105_col, employ_105_col, unemploy_105_col]].iloc[24:26 , :]
df2018_105_df[employ_105_col]=df2018_105_df[employ_105_col].replace(regex=[r'\D+'], value="")
df2018_105_df[total_105_col]=df2018_105_df[total_105_col].replace(regex=[r'\D+'], value="")
df2018_105_df[unemploy_105_col]=df2018_105_df[unemploy_105_col].replace(regex=[r'\D+'], value="")
#2018
df2018_105_df = df2018_105_df.dropna(subset=[total_105_col, employ_105_col, unemploy_105_col])
df2018_105_df[total_105_col] = df2018_105_df[total_105_col].astype(int)

df2017_105_df = df2017[[total_105_col, employ_105_col, unemploy_105_col]].iloc[24:26 , :]
df2017_105_df[employ_105_col]=df2017_105_df[employ_105_col].replace(regex=[r'\D+'], value="")
df2017_105_df[total_105_col]=df2017_105_df[total_105_col].replace(regex=[r'\D+'], value="")
df2017_105_df[unemploy_105_col]=df2017_105_df[unemploy_105_col].replace(regex=[r'\D+'], value="")
#2017
df2017_105_df = df2017_105_df.dropna(subset=[total_105_col, employ_105_col, unemploy_105_col])
df2017_105_df[total_105_col] = df2017_105_df[total_105_col].astype(int)

df2017_105_list = df2017_105_df.values.tolist()
df2018_105_list = df2018_105_df.values.tolist()
df2019_105_list = df2019_105_df.values.tolist()
df2020_105_list = df2020_105_df.values.tolist()
df2021_105_list = df2021_105_df.values.tolist()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
EM = []
EM.append(int(int(df2017_105_list[0][0]) * int(df2017_105_list[0][1])/1000)) 
EM.append(int(int(df2018_105_list[0][0]) * int(df2018_105_list[0][1])/1000))
EM.append(int(int(df2019_105_list[0][0]) * int(df2019_105_list[0][1])/1000))
EM.append(int(int(df2020_105_list[0][0]) * int(df2020_105_list[0][1])/1000))
EM.append(int(int(df2021_105_list[0][0]) * int(df2021_105_list[0][1])/1000))

UM = []
UM.append(int(int(df2017_105_list[0][0]) * int(df2017_105_list[0][2])/1000)) 
UM.append(int(int(df2018_105_list[0][0]) * int(df2018_105_list[0][2])/1000))
UM.append(int(int(df2019_105_list[0][0]) * int(df2019_105_list[0][2])/1000))
UM.append(int(int(df2020_105_list[0][0]) * int(df2020_105_list[0][2])/1000))
UM.append(int(int(df2021_105_list[0][0]) * int(df2021_105_list[0][2])/1000))

EF = []
EF.append(int(int(df2017_105_list[1][0]) * int(df2017_105_list[1][1])/1000)) 
EF.append(int(int(df2018_105_list[1][0]) * int(df2018_105_list[1][1])/1000))
EF.append(int(int(df2019_105_list[1][0]) * int(df2019_105_list[1][1])/1000))
EF.append(int(int(df2020_105_list[1][0]) * int(df2020_105_list[1][1])/1000))
EF.append(int(int(df2021_105_list[1][0]) * int(df2021_105_list[1][1])/1000))


UF = []
UF.append(int(int(df2017_105_list[1][0]) * int(df2017_105_list[1][2])/1000))
UF.append(int(int(df2018_105_list[1][0]) * int(df2018_105_list[1][2])/1000))
UF.append(int(int(df2019_105_list[1][0]) * int(df2019_105_list[1][2])/1000))
UF.append(int(int(df2020_105_list[1][0]) * int(df2020_105_list[1][2])/1000))
UF.append(int(int(df2021_105_list[1][0]) * int(df2021_105_list[1][2])/1000))

race_units = {
   'Emplyed Female': tuple(EF),
   'Emplyed Male': tuple(EM),
   'Unemployed Female' : tuple(UF),
   'Unemployed Male' : tuple(UM),
   }


   # Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.set_title('Employed & Unemployed Population Comparison by Sex, Data from Cencus Tract 105')
ax.set_xlabel('Year')
ax.set_ylabel('Population')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Move the legend outside of the plot area
ax.legend(bbox_to_anchor=(1.04,0.5), loc="center left", borderaxespad=0)

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

indian = []
indian.append(df5_105_list[2][1])

indian.append(df4_105_list[2][1])

indian.append(df3_105_list[2][1])

indian.append(df2_105_list[2][1])

indian.append(df1_105_list[2][1])


asian = []
asian.append(df5_105_list[3][1])

asian.append(df4_105_list[3][1])

asian.append(df3_105_list[3][1])

asian.append(df2_105_list[3][1])

asian.append(df1_105_list[3][1])

hawaiian = []
hawaiian.append(df5_105_list[4][1])

hawaiian.append(df4_105_list[4][1])

hawaiian.append(df3_105_list[4][1])

hawaiian.append(df2_105_list[4][1])

hawaiian.append(df1_105_list[4][1])


otherss = []
otherss.append(df5_105_list[5][1])

otherss.append(df4_105_list[5][1])

otherss.append(df3_105_list[5][1])

otherss.append(df2_105_list[5][1])

otherss.append(df1_105_list[5][1])


twomore = []
twomore.append(df5_105_list[6][1])

twomore.append(df4_105_list[6][1])

twomore.append(df3_105_list[6][1])

twomore.append(df2_105_list[6][1])

twomore.append(df1_105_list[6][1])

latino = []

latino.append(df5_105_list[7][1])

latino.append(df4_105_list[7][1])

latino.append(df3_105_list[7][1])

latino.append(df2_105_list[7][1])

latino.append(df1_105_list[7][1])


indian = [float(x) for x in indian]

asian = [float(x) for x in asian]

hawaiian = [float(x) for x in hawaiian]

otherss = [float(x) for x in otherss]

twomore = [float(x) for x in twomore]

latino = [float(x) for x in latino]


race_units = {
   'American Indian and Alaska Native' : tuple(indian),
   'Asian' : tuple(asian),
   'Native Hawaiian and Other Pacific Islander' : tuple(hawaiian),
   'Some other race' : tuple(otherss),
   'Two or more races' : tuple(twomore),
   'Hispanic or Latino origin' : tuple(latino),
   }


   # Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.set_title('Renter-occupied Units by Race, Data from Cencus Tract 105, Excluding the three most numerous races')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Move the legend outside of the plot area
ax.legend(bbox_to_anchor=(1.04,0.5), loc="center left", borderaxespad=0)

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_105_list[0][1]) 

renteroccupied.append(df4_105_list[0][1])

renteroccupied.append(df3_105_list[0][1])

renteroccupied.append(df2_105_list[0][1])

renteroccupied.append(df1_105_list[0][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_105_list[0][0])

owneroccupied.append(df4_105_list[0][0])

owneroccupied.append(df3_105_list[0][0])

owneroccupied.append(df2_105_list[0][0])

owneroccupied.append(df1_105_list[0][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 105, Race = White')
ax.set_xlabel('Year')
ax.set_ylabel('Units')
'''
# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])
'''
# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_105_list[1][1]) 

renteroccupied.append(df4_105_list[1][1])

renteroccupied.append(df3_105_list[1][1])

renteroccupied.append(df2_105_list[1][1])

renteroccupied.append(df1_105_list[1][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_105_list[1][0])

owneroccupied.append(df4_105_list[1][0])

owneroccupied.append(df3_105_list[1][0])

owneroccupied.append(df2_105_list[1][0])

owneroccupied.append(df1_105_list[1][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 105, Race = Black or African American')
ax.set_xlabel('Year')
ax.set_ylabel('Units')
'''
# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])
'''
# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_105_list[2][1]) 

renteroccupied.append(df4_105_list[2][1])

renteroccupied.append(df3_105_list[2][1])

renteroccupied.append(df2_105_list[2][1])

renteroccupied.append(df1_105_list[2][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_105_list[2][0])

owneroccupied.append(df4_105_list[2][0])

owneroccupied.append(df3_105_list[2][0])

owneroccupied.append(df2_105_list[2][0])

owneroccupied.append(df1_105_list[2][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 105, Race = American Indian and Alaska Native')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_105_list[3][1]) 

renteroccupied.append(df4_105_list[3][1])

renteroccupied.append(df3_105_list[3][1])

renteroccupied.append(df2_105_list[3][1])

renteroccupied.append(df1_105_list[3][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_105_list[3][0])

owneroccupied.append(df4_105_list[3][0])

owneroccupied.append(df3_105_list[3][0])

owneroccupied.append(df2_105_list[3][0])

owneroccupied.append(df1_105_list[3][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 105, Race = Asian')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_105_list[4][1]) 

renteroccupied.append(df4_105_list[4][1])

renteroccupied.append(df3_105_list[4][1])

renteroccupied.append(df2_105_list[4][1])

renteroccupied.append(df1_105_list[4][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_105_list[4][0])

owneroccupied.append(df4_105_list[4][0])

owneroccupied.append(df3_105_list[4][0])

owneroccupied.append(df2_105_list[4][0])

owneroccupied.append(df1_105_list[4][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 105, Race = Native Hawaiian and Other Pacific Islander')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_105_list[5][1]) 

renteroccupied.append(df4_105_list[5][1])

renteroccupied.append(df3_105_list[5][1])

renteroccupied.append(df2_105_list[5][1])

renteroccupied.append(df1_105_list[5][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_105_list[5][0])

owneroccupied.append(df4_105_list[5][0])

owneroccupied.append(df3_105_list[5][0])

owneroccupied.append(df2_105_list[5][0])

owneroccupied.append(df1_105_list[5][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 105, Race = Some other race')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_105_list[6][1]) 

renteroccupied.append(df4_105_list[6][1])

renteroccupied.append(df3_105_list[6][1])

renteroccupied.append(df2_105_list[6][1])

renteroccupied.append(df1_105_list[6][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_105_list[6][0])

owneroccupied.append(df4_105_list[6][0])

owneroccupied.append(df3_105_list[6][0])

owneroccupied.append(df2_105_list[6][0])

owneroccupied.append(df1_105_list[6][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 105, Race = Two or more races')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_105_list[7][1]) 

renteroccupied.append(df4_105_list[7][1])

renteroccupied.append(df3_105_list[7][1])

renteroccupied.append(df2_105_list[7][1])

renteroccupied.append(df1_105_list[7][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_105_list[7][0])

owneroccupied.append(df4_105_list[7][0])

owneroccupied.append(df3_105_list[7][0])

owneroccupied.append(df2_105_list[7][0])

owneroccupied.append(df1_105_list[7][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 105, Race = Hispanic or Latino origin')
ax.set_xlabel('Year')
ax.set_ylabel('Units')
'''
# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])
'''
# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_105_list[8][1]) 

renteroccupied.append(df4_105_list[8][1])

renteroccupied.append(df3_105_list[8][1])

renteroccupied.append(df2_105_list[8][1])

renteroccupied.append(df1_105_list[8][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_105_list[8][0])

owneroccupied.append(df4_105_list[8][0])

owneroccupied.append(df3_105_list[8][0])

owneroccupied.append(df2_105_list[8][0])

owneroccupied.append(df1_105_list[8][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 105, Race = White alone, not Hispanic or Latino')
ax.set_xlabel('Year')
ax.set_ylabel('Units')
'''
# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])
'''
# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
black = []
black.append(df5_105_list[1][0])

black.append(df4_105_list[1][0])

black.append(df3_105_list[1][0])

black.append(df2_105_list[1][0])

black.append(df1_105_list[1][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

indian = []
indian.append(df5_105_list[2][0])

indian.append(df4_105_list[2][0])

indian.append(df3_105_list[2][0])

indian.append(df2_105_list[2][0])

indian.append(df1_105_list[2][0])


asian = []
asian.append(df5_105_list[3][0])

asian.append(df4_105_list[3][0])

asian.append(df3_105_list[3][0])

asian.append(df2_105_list[3][0])

asian.append(df1_105_list[3][0])

hawaiian = []
hawaiian.append(df5_105_list[4][0])

hawaiian.append(df4_105_list[4][0])

hawaiian.append(df3_105_list[4][0])

hawaiian.append(df2_105_list[4][0])

hawaiian.append(df1_105_list[4][0])


otherss = []
otherss.append(df5_105_list[5][0])

otherss.append(df4_105_list[5][0])

otherss.append(df3_105_list[5][0])

otherss.append(df2_105_list[5][0])

otherss.append(df1_105_list[5][0])


twomore = []
twomore.append(df5_105_list[6][0])

twomore.append(df4_105_list[6][0])

twomore.append(df3_105_list[6][0])

twomore.append(df2_105_list[6][0])

twomore.append(df1_105_list[6][0])

latino = []

latino.append(df5_105_list[7][0])

latino.append(df4_105_list[7][0])

latino.append(df3_105_list[7][0])

latino.append(df2_105_list[7][0])

latino.append(df1_105_list[7][0])




black = [float(x) for x in black]

indian = [float(x) for x in indian]

asian = [float(x) for x in asian]

hawaiian = [float(x) for x in hawaiian]

otherss = [float(x) for x in otherss]

twomore = [float(x) for x in twomore]

latino = [float(x) for x in latino]


race_units = {
   'Black or African American': tuple(black),
   'American Indian and Alaska Native' : tuple(indian),
   'Asian' : tuple(asian),
   'Native Hawaiian and Other Pacific Islander' : tuple(hawaiian),
   'Some other race' : tuple(otherss),
   'Two or more races' : tuple(twomore),
   'Hispanic or Latino origin' : tuple(latino),
   }


   # Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.set_title('Owner-occupied Units by Race, Data from Cencus Tract 105, Except White')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Move the legend outside of the plot area
ax.legend(bbox_to_anchor=(1.04,0.5), loc="center left", borderaxespad=0)

# Show the chart
plt.show()

owner_col = 'Census Tract 64, District of Columbia, District of Columbia!!Owner-occupied housing units!!Estimate'
renter_col = 'Census Tract 64, District of Columbia, District of Columbia!!Renter-occupied housing units!!Estimate'

df1_64_df = df1[[owner_col, renter_col]].iloc[3: , :]

df1_64_df[owner_col]=df1_64_df[owner_col].replace(regex=[r'\D+'], value="")
df1_64_df[renter_col]=df1_64_df[renter_col].replace(regex=[r'\D+'], value="")

#2021
df1_64_df = df1_64_df.dropna(subset=[owner_col, renter_col])

df1_64_df[owner_col] = df1_64_df[owner_col].astype(int)
df1_64_df[owner_col] = df1_64_df[owner_col].astype(int)
df1_64_df.head(9)

#2020
df2_64_df = df2[[owner_col, renter_col]].iloc[3: , :]

df2_64_df[owner_col]=df2_64_df[owner_col].replace(regex=[r'\D+'], value="")
df2_64_df[renter_col]=df2_64_df[renter_col].replace(regex=[r'\D+'], value="")

df2_64_df = df2_64_df.dropna(subset=[owner_col, renter_col])

df2_64_df[owner_col] = df2_64_df[owner_col].astype(int)
df2_64_df[owner_col] = df2_64_df[owner_col].astype(int)
df2_64_df.head(9)

#2019
df3_64_df = df3[[owner_col, renter_col]].iloc[3: , :]

df3_64_df[owner_col]=df3_64_df[owner_col].replace(regex=[r'\D+'], value="")
df3_64_df[renter_col]=df3_64_df[renter_col].replace(regex=[r'\D+'], value="")

df3_64_df = df3_64_df.dropna(subset=[owner_col, renter_col])

df3_64_df[owner_col] = df3_64_df[owner_col].astype(int)
df3_64_df[owner_col] = df3_64_df[owner_col].astype(int)
df3_64_df.head(9)

#2018
df4_64_df = df4[[owner_col, renter_col]].iloc[3: , :]

df4_64_df[owner_col]=df4_64_df[owner_col].replace(regex=[r'\D+'], value="")
df4_64_df[renter_col]=df4_64_df[renter_col].replace(regex=[r'\D+'], value="")

df4_64_df = df4_64_df.dropna(subset=[owner_col, renter_col])

df4_64_df[owner_col] = df4_64_df[owner_col].astype(int)
df4_64_df[owner_col] = df4_64_df[owner_col].astype(int)
df4_64_df.head(9)

#2017
df5_64_df = df5[[owner_col, renter_col]].iloc[3: , :]

df5_64_df[owner_col]=df5_64_df[owner_col].replace(regex=[r'\D+'], value="")
df5_64_df[renter_col]=df5_64_df[renter_col].replace(regex=[r'\D+'], value="")

df5_64_df = df5_64_df.dropna(subset=[owner_col, renter_col])

df5_64_df[owner_col] = df5_64_df[owner_col].astype(int)
df5_64_df[owner_col] = df5_64_df[owner_col].astype(int)
df5_64_df.head(9)

# row index: 0 = White, 1 = Black or African American, 2 = American Indian and Alaska Native,
# 3 = Asian, 4 = Native Hawaiian and Other Pacific Islander, 5 = Some other race, 6 = Two or more races
# 7 = Hispanic or Latino origin, 8 = White alone, not Hispanic or Latino
# col index: 0 = owner-occupied, 1 = renter occupied

df1_64_list = df1_64_df.values.tolist()

df2_64_list = df2_64_df.values.tolist()

df3_64_list = df3_64_df.values.tolist()

df4_64_list = df4_64_df.values.tolist()

df5_64_list = df5_64_df.values.tolist()
#df1_64_list = [[row[i] for i in range(1, len(row))] for row in df1_64_list]
print(df1_64_list[0][0])
print(df2_64_list[0][0])
print(df3_64_list[0][0])
print(df4_64_list[0][0])
print(df5_64_list[0][0])

print(df1_64_list[0][1])
print(df2_64_list[0][1])
print(df3_64_list[0][1])
print(df4_64_list[0][1])
print(df5_64_list[0][1])

"""横坐标
2017- 2021
纵坐标 
unit变化

1. 有九条不同曲线，分别代表九个种族分类. 此时有两张图，
一张图显示renter， 一张显示owner
- Owner:
- White: 
2017: df5_64_list[0][0],
2018: df4_64_list[0][0],...

- Black:
2017: df5_64_list[1][0].
2018: df4_64_list[1][0]....

- Renter:

- White: 
2017: df5_64_list[0][1],
2018: df4_64_list[0][1],...


- Black:
2017: df5_64_list[1][1].
2018: df4_64_list[1][1]....


2. 有两条不同曲线，分别代表renter和owner。这样，应该有九张图，每张图一个种族。
比如，White的变化，owner2017:df5_64_list[0][0], owner2018:df4_64_list[0][0]...
renter2017: df5_64_list[0][1], renter2018:df4_64_list[0][1]...
"""

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
white = []
white.append(df5_64_list[0][0]) 

white.append(df4_64_list[0][0])

white.append(df3_64_list[0][0])

white.append(df2_64_list[0][0])

white.append(df1_64_list[0][0])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
black = []
black.append(df5_64_list[1][0])

black.append(df4_64_list[1][0])

black.append(df3_64_list[1][0])

black.append(df2_64_list[1][0])

black.append(df1_64_list[1][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

indian = []
indian.append(df5_64_list[2][0])

indian.append(df4_64_list[2][0])

indian.append(df3_64_list[2][0])

indian.append(df2_64_list[2][0])

indian.append(df1_64_list[2][0])


asian = []
asian.append(df5_64_list[3][0])

asian.append(df4_64_list[3][0])

asian.append(df3_64_list[3][0])

asian.append(df2_64_list[3][0])

asian.append(df1_64_list[3][0])

hawaiian = []
hawaiian.append(df5_64_list[4][0])

hawaiian.append(df4_64_list[4][0])

hawaiian.append(df3_64_list[4][0])

hawaiian.append(df2_64_list[4][0])

hawaiian.append(df1_64_list[4][0])


otherss = []
otherss.append(df5_64_list[5][0])

otherss.append(df4_64_list[5][0])

otherss.append(df3_64_list[5][0])

otherss.append(df2_64_list[5][0])

otherss.append(df1_64_list[5][0])


twomore = []
twomore.append(df5_64_list[6][0])

twomore.append(df4_64_list[6][0])

twomore.append(df3_64_list[6][0])

twomore.append(df2_64_list[6][0])

twomore.append(df1_64_list[6][0])

latino = []

latino.append(df5_64_list[7][0])

latino.append(df4_64_list[7][0])

latino.append(df3_64_list[7][0])

latino.append(df2_64_list[7][0])

latino.append(df1_64_list[7][0])


alone = []

alone.append(df5_64_list[8][0])

alone.append(df4_64_list[8][0])

alone.append(df3_64_list[8][0])

alone.append(df2_64_list[8][0])

alone.append(df1_64_list[8][0])


white = [float(x) for x in white]

black = [float(x) for x in black]

indian = [float(x) for x in indian]

asian = [float(x) for x in asian]

hawaiian = [float(x) for x in hawaiian]

otherss = [float(x) for x in otherss]

twomore = [float(x) for x in twomore]

latino = [float(x) for x in latino]

alone = [float(x) for x in alone]

race_units = {
   'White': tuple(white),
   'Black or African American': tuple(black),
   'American Indian and Alaska Native' : tuple(indian),
   'Asian' : tuple(asian),
   'Native Hawaiian and Other Pacific Islander' : tuple(hawaiian),
   'Some other race' : tuple(otherss),
   'Two or more races' : tuple(twomore),
   'Hispanic or Latino origin' : tuple(latino),
   'White alone, not Hispanic or Latino' : tuple(alone)
   }


   # Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.set_title('Owner-occupied Units by Race, Data from Cencus Tract 64')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Move the legend outside of the plot area
ax.legend(bbox_to_anchor=(1.04,0.5), loc="center left", borderaxespad=0)

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
white = []
white.append(df5_64_list[0][1]) 

white.append(df4_64_list[0][1])

white.append(df3_64_list[0][1])

white.append(df2_64_list[0][1])

white.append(df1_64_list[0][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
black = []
black.append(df5_64_list[1][1])

black.append(df4_64_list[1][1])

black.append(df3_64_list[1][1])

black.append(df2_64_list[1][1])

black.append(df1_64_list[1][1])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

indian = []
indian.append(df5_64_list[2][1])

indian.append(df4_64_list[2][1])

indian.append(df3_64_list[2][1])

indian.append(df2_64_list[2][1])

indian.append(df1_64_list[2][1])


asian = []
asian.append(df5_64_list[3][1])

asian.append(df4_64_list[3][1])

asian.append(df3_64_list[3][1])

asian.append(df2_64_list[3][1])

asian.append(df1_64_list[3][1])

hawaiian = []
hawaiian.append(df5_64_list[4][1])

hawaiian.append(df4_64_list[4][1])

hawaiian.append(df3_64_list[4][1])

hawaiian.append(df2_64_list[4][1])

hawaiian.append(df1_64_list[4][1])


otherss = []
otherss.append(df5_64_list[5][1])

otherss.append(df4_64_list[5][1])

otherss.append(df3_64_list[5][1])

otherss.append(df2_64_list[5][1])

otherss.append(df1_64_list[5][1])


twomore = []
twomore.append(df5_64_list[6][1])

twomore.append(df4_64_list[6][1])

twomore.append(df3_64_list[6][1])

twomore.append(df2_64_list[6][1])

twomore.append(df1_64_list[6][1])

latino = []

latino.append(df5_64_list[7][1])

latino.append(df4_64_list[7][1])

latino.append(df3_64_list[7][1])

latino.append(df2_64_list[7][1])

latino.append(df1_64_list[7][1])


alone = []

alone.append(df5_64_list[8][1])

alone.append(df4_64_list[8][1])

alone.append(df3_64_list[8][1])

alone.append(df2_64_list[8][1])

alone.append(df1_64_list[8][1])


white = [float(x) for x in white]

black = [float(x) for x in black]

indian = [float(x) for x in indian]

asian = [float(x) for x in asian]

hawaiian = [float(x) for x in hawaiian]

otherss = [float(x) for x in otherss]

twomore = [float(x) for x in twomore]

latino = [float(x) for x in latino]

alone = [float(x) for x in alone]

race_units = {
   'White': tuple(white),
   'Black or African American': tuple(black),
   'American Indian and Alaska Native' : tuple(indian),
   'Asian' : tuple(asian),
   'Native Hawaiian and Other Pacific Islander' : tuple(hawaiian),
   'Some other race' : tuple(otherss),
   'Two or more races' : tuple(twomore),
   'Hispanic or Latino origin' : tuple(latino),
   'White alone, not Hispanic or Latino' : tuple(alone)
   }

   
   # Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.set_title('Renter-occupied Units by Race, Data from Cencus Tract 64')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Move the legend outside of the plot area
ax.legend(bbox_to_anchor=(1.04,0.5), loc="center left", borderaxespad=0)

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_64_list[0][1]) 

renteroccupied.append(df4_64_list[0][1])

renteroccupied.append(df3_64_list[0][1])

renteroccupied.append(df2_64_list[0][1])

renteroccupied.append(df1_64_list[0][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_64_list[0][0])

owneroccupied.append(df4_64_list[0][0])

owneroccupied.append(df3_64_list[0][0])

owneroccupied.append(df2_64_list[0][0])

owneroccupied.append(df1_64_list[0][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = White')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

years = [2017, 2018, 2019, 2020 , 2021]
race_units = {
    'owner-occupied': [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],
    #'renter-occupied': [df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]]
}

fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = White')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_64_list[1][1]) 

renteroccupied.append(df4_64_list[1][1])

renteroccupied.append(df3_64_list[1][1])

renteroccupied.append(df2_64_list[1][1])

renteroccupied.append(df1_64_list[1][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_64_list[1][0])

owneroccupied.append(df4_64_list[1][0])

owneroccupied.append(df3_64_list[1][0])

owneroccupied.append(df2_64_list[1][0])

owneroccupied.append(df1_64_list[1][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = Black or African American')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

years = [2017, 2018, 2019, 2020 , 2021]
race_units = {
    'owner-occupied': [df5_64_list[1][0],df4_64_list[1][0],df3_64_list[1][0],df2_64_list[1][0],df1_64_list[1][0]],
    #'renter-occupied': [df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]]
}

fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = Black or African American')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_64_list[2][1]) 

renteroccupied.append(df4_64_list[2][1])

renteroccupied.append(df3_64_list[2][1])

renteroccupied.append(df2_64_list[2][1])

renteroccupied.append(df1_64_list[2][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_64_list[2][0])

owneroccupied.append(df4_64_list[2][0])

owneroccupied.append(df3_64_list[2][0])

owneroccupied.append(df2_64_list[2][0])

owneroccupied.append(df1_64_list[2][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = American Indian and Alaska Native')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_64_list[3][1]) 

renteroccupied.append(df4_64_list[3][1])

renteroccupied.append(df3_64_list[3][1])

renteroccupied.append(df2_64_list[3][1])

renteroccupied.append(df1_64_list[3][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_64_list[3][0])

owneroccupied.append(df4_64_list[3][0])

owneroccupied.append(df3_64_list[3][0])

owneroccupied.append(df2_64_list[3][0])

owneroccupied.append(df1_64_list[3][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = Asian')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_64_list[4][1]) 

renteroccupied.append(df4_64_list[4][1])

renteroccupied.append(df3_64_list[4][1])

renteroccupied.append(df2_64_list[4][1])

renteroccupied.append(df1_64_list[4][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_64_list[4][0])

owneroccupied.append(df4_64_list[4][0])

owneroccupied.append(df3_64_list[4][0])

owneroccupied.append(df2_64_list[4][0])

owneroccupied.append(df1_64_list[4][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = Native Hawaiian and Other Pacific Islander')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_64_list[5][1]) 

renteroccupied.append(df4_64_list[5][1])

renteroccupied.append(df3_64_list[5][1])

renteroccupied.append(df2_64_list[5][1])

renteroccupied.append(df1_64_list[5][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_64_list[5][0])

owneroccupied.append(df4_64_list[5][0])

owneroccupied.append(df3_64_list[5][0])

owneroccupied.append(df2_64_list[5][0])

owneroccupied.append(df1_64_list[5][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = Some other race')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_64_list[6][1]) 

renteroccupied.append(df4_64_list[6][1])

renteroccupied.append(df3_64_list[6][1])

renteroccupied.append(df2_64_list[6][1])

renteroccupied.append(df1_64_list[6][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_64_list[6][0])

owneroccupied.append(df4_64_list[6][0])

owneroccupied.append(df3_64_list[6][0])

owneroccupied.append(df2_64_list[6][0])

owneroccupied.append(df1_64_list[6][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = Two or more races')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_64_list[7][1]) 

renteroccupied.append(df4_64_list[7][1])

renteroccupied.append(df3_64_list[7][1])

renteroccupied.append(df2_64_list[7][1])

renteroccupied.append(df1_64_list[7][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_64_list[7][0])

owneroccupied.append(df4_64_list[7][0])

owneroccupied.append(df3_64_list[7][0])

owneroccupied.append(df2_64_list[7][0])

owneroccupied.append(df1_64_list[7][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = Hispanic or Latino origin')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

# Create data
years = [2017, 2018, 2019, 2020 , 2021]
renteroccupied = []
renteroccupied.append(df5_64_list[8][1]) 

renteroccupied.append(df4_64_list[8][1])

renteroccupied.append(df3_64_list[8][1])

renteroccupied.append(df2_64_list[8][1])

renteroccupied.append(df1_64_list[8][1])
#[df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]],
owneroccupied = []
owneroccupied.append(df5_64_list[8][0])

owneroccupied.append(df4_64_list[8][0])

owneroccupied.append(df3_64_list[8][0])

owneroccupied.append(df2_64_list[8][0])

owneroccupied.append(df1_64_list[8][0])
#= [df5_64_list[0][0],df4_64_list[0][0],df3_64_list[0][0],df2_64_list[0][0],df1_64_list[0][0]],

renteroccupied = [float(x) for x in renteroccupied]

owneroccupied = [float(x) for x in owneroccupied]

race_units = {
   'renter-occupied': tuple(renteroccupied),
   'owner-occupied': tuple(owneroccupied),}

# Plot the graph
fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

# Add legends, titles, axis labels, etc.
ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = White alone, not Hispanic or Latino')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

# Adjust the y-axis scale
max_y = max([max(units) for units in race_units.values()])
ax.set_ylim([0, (max_y // 10 + 1) * 10])

# Show the chart
plt.show()

import matplotlib.pyplot as plt

years = [2017, 2018, 2019, 2020 , 2021]
race_units = {
    'owner-occupied': [df5_64_list[8][0],df4_64_list[8][0],df3_64_list[8][0],df2_64_list[8][0],df1_64_list[8][0]],
    #'renter-occupied': [df5_64_list[0][1],df4_64_list[0][1],df3_64_list[0][1],df2_64_list[0][1],df1_64_list[0][1]]
}

fig, ax = plt.subplots()
for race, units in race_units.items():
    ax.plot(years, units, label=race)

ax.legend()
ax.set_title('Units by Type, Data from Cencus Tract 64, Race = White alone, not Hispanic or Latino')
ax.set_xlabel('Year')
ax.set_ylabel('Units')

plt.show()

# Get the list of all column names from headers
column_headers = list(finance_char_df.columns.values)
print("The Column Header :", column_headers)

owner_col = 'Census Tract 64, District of Columbia, District of Columbia!!Owner-occupied housing units!!Estimate'
renter_col = 'Census Tract 64, District of Columbia, District of Columbia!!Renter-occupied housing units!!Estimate'

tract_64_df = finance_char_df[['Label (Grouping)', 'Census Tract 64, District of Columbia, District of Columbia!!Occupied housing units!!Estimate',owner_col, renter_col]].iloc[3: , :]
tract_64_df.head()

#tract_64_df[owner_col]=tract_64_df[owner_col].replace(regex=[r'\D+'], value="")
#tract_64_df[renter_col]=tract_64_df[renter_col].replace(regex=[r'\D+'], value="")

#tract_64_df = tract_64_df.dropna(subset=[owner_col, renter_col])

tract_64_df[owner_col] = tract_64_df[owner_col].astype(int)
tract_64_df[owner_col] = tract_64_df[owner_col].astype(int)
tract_64_df.head(9)

import plotly.graph_objects as gp
tract_64_df = tract_64_df.head(9)
y_income = list(tract_64_df['Label (Grouping)'])
x_O = tract_64_df[owner_col] *-1
x_R = tract_64_df[renter_col] 

fig = gp.Figure()
  
# Adding owner data to the figure
fig.add_trace(gp.Bar(y= y_income, x = x_O, 
                     name = 'owner', 
                     orientation = 'h'))
  
# Adding renter data to the figure
fig.add_trace(gp.Bar(y = y_income, x = x_R,
                     name = 'renter', orientation = 'h'))
  
# Updating the layout for our graph
fig.update_layout(title = 'Unit Mean Income of Tract 64', barmode = 'relative',
                 title_font_size = 22,
                 bargap = 0.0, bargroupgap = 0,
                 xaxis = dict(tickvals = [-200, -150, -100, -50,
                                          0, 50, 100, 150, 200],
                                
                              ticktext = ['200', '150', '100','50', '0', 
                                          '50', '100', '150', '200'],
                                
                              title = 'Unit',
                              title_font_size = 14),
                 # Reducing the font size of the y-axis labels
                 yaxis = dict(tickfont = dict(size = 10)))
# Setting the row names

fig.show()

owner_col = 'Census Tract 102.01, District of Columbia, District of Columbia!!Owner-occupied housing units!!Estimate'
renter_col = 'Census Tract 102.01, District of Columbia, District of Columbia!!Renter-occupied housing units!!Estimate'

tract_10201_df = finance_char_df[['Label (Grouping)', 'Census Tract 102.01, District of Columbia, District of Columbia!!Occupied housing units!!Estimate',owner_col, renter_col]].iloc[3: , :]
tract_10201_df.head()

tract_10201_df[owner_col]=tract_10201_df[owner_col].replace(regex=[r'\D+'], value="")
tract_10201_df[renter_col] = tract_10201_df[renter_col].replace(regex=[r'\D+'], value="")
tract_10201_df = tract_10201_df.dropna(subset=[owner_col, renter_col])

tract_10201_df[owner_col] = tract_10201_df[owner_col].astype(int)
tract_10201_df[renter_col] = tract_10201_df[renter_col].astype(int)

tract_10201_df.head(9)

tract_10201_df = tract_10201_df.head(9)
import plotly.graph_objects as gp

y_income = list(tract_10201_df['Label (Grouping)'])
x_O = tract_10201_df[owner_col] * -1
x_R = tract_10201_df[renter_col] 


fig = gp.Figure()
  
# Adding owner data to the figure
fig.add_trace(gp.Bar(y= y_income, x = x_O, 
                     name = 'owner', 
                     orientation = 'h'))
  
# Adding renter data to the figure
fig.add_trace(gp.Bar(y = y_income, x = x_R,
                     name = 'renter', orientation = 'h'))
  
# Updating the layout for our graph
fig.update_layout(title = 'Unit Mean Income of Tract 102.01', barmode = 'relative',
                 title_font_size = 22,
                 bargap = 0.0, bargroupgap = 0,
                 xaxis = dict(tickvals = [-200, -150, -100, -50,
                                          0, 50, 100, 150, 200],
                                
                              ticktext = ['200', '150', '100','50', '0', 
                                          '50', '100', '150', '200'],
                                
                              title = 'Units',
                              title_font_size = 14)
                 )
  
fig.show()

owner_col = 'Census Tract 102.02, District of Columbia, District of Columbia!!Owner-occupied housing units!!Estimate'
renter_col = 'Census Tract 102.02, District of Columbia, District of Columbia!!Renter-occupied housing units!!Estimate'

tract_10202_df = finance_char_df[['Label (Grouping)', 'Census Tract 102.02, District of Columbia, District of Columbia!!Occupied housing units!!Estimate',owner_col, renter_col]].iloc[3: , :]
tract_10202_df.head()

#tract_10202_df[owner_col]=tract_10202_df[owner_col].replace(regex=[r'\D+'], value="")
#tract_10202_df[renter_col] = tract_10202_df[renter_col].replace(regex=[r'\D+'], value="")
tract_10202_df = tract_10202_df.dropna(subset=[owner_col, renter_col])

tract_10202_df[owner_col] = tract_10202_df[owner_col].astype(int)
tract_10202_df[renter_col] = tract_10202_df[renter_col].astype(int)

tract_10202_df.head()

tract_10202_df = tract_10202_df.head(9)

import plotly.graph_objects as gp

y_income = list(tract_10202_df['Label (Grouping)'])
x_O = tract_10202_df[owner_col] * -1
x_R = tract_10202_df[renter_col] 


fig = gp.Figure()
  
# Adding owner data to the figure
fig.add_trace(gp.Bar(y= y_income, x = x_O, 
                     name = 'owner', 
                     orientation = 'h'))
  
# Adding renter data to the figure
fig.add_trace(gp.Bar(y = y_income, x = x_R,
                     name = 'renter', orientation = 'h'))
  
# Updating the layout for our graph
fig.update_layout(title = 'Unit Mean Income of Tract 102.02', barmode = 'relative',
                 title_font_size = 22,
                 bargap = 0.0, bargroupgap = 0,
                 xaxis = dict(tickvals = [-200, -150, -100, -50,
                                          0, 50, 100, 150, 200],
                                
                              ticktext = ['200', '150', '100','50', '0', 
                                          '50', '100', '150', '200'],
                                
                              title = 'Units',
                              title_font_size = 14)
                 )
  
fig.show()

owner_col = 'Census Tract 105, District of Columbia, District of Columbia!!Owner-occupied housing units!!Estimate'
renter_col = 'Census Tract 105, District of Columbia, District of Columbia!!Renter-occupied housing units!!Estimate'

tract_105_df = finance_char_df[['Label (Grouping)', 'Census Tract 105, District of Columbia, District of Columbia!!Occupied housing units!!Estimate',owner_col, renter_col]].iloc[3: , :]
tract_105_df.head()

#tract_105_df[owner_col]=tract_105_df[owner_col].replace(regex=[r'\D+'], value="")
#tract_105_df[renter_col] = tract_105_df[renter_col].replace(regex=[r'\D+'], value="")
tract_105_df = tract_105_df.dropna(subset=[owner_col, renter_col])

tract_105_df[owner_col] = tract_105_df[owner_col].astype(int)
tract_105_df[renter_col] = tract_105_df[renter_col].astype(int)

tract_105_df.head(9)

tract_105_df = tract_105_df.head(9)

import plotly.graph_objects as gp

y_income = list(tract_105_df['Label (Grouping)'])
x_O = tract_105_df[owner_col] * -1
x_R = tract_105_df[renter_col] 


fig = gp.Figure()
  
# Adding owner data to the figure
fig.add_trace(gp.Bar(y= y_income, x = x_O, 
                     name = 'owner', 
                     orientation = 'h'))
  
# Adding renter data to the figure
fig.add_trace(gp.Bar(y = y_income, x = x_R,
                     name = 'renter', orientation = 'h'))
  
# Updating the layout for our graph
fig.update_layout(title = 'Unit Mean Income of Tract 105', barmode = 'relative',
                 title_font_size = 22,
                 bargap = 0.0, bargroupgap = 0,
                 xaxis = dict(tickvals = [-200, -150, -100, -50,
                                          0, 50, 100, 150, 200],
                                
                              ticktext = ['200', '150', '100','50', '0', 
                                          '50', '100', '150', '200'],
                                
                              title = 'Units',
                              title_font_size = 14)
                 )
  
fig.show()

owner_col = 'Census Tract 110.01, District of Columbia, District of Columbia!!Owner-occupied housing units!!Estimate'
renter_col = 'Census Tract 110.01, District of Columbia, District of Columbia!!Renter-occupied housing units!!Estimate'

tract_11001_df = finance_char_df[['Label (Grouping)', 'Census Tract 110.01, District of Columbia, District of Columbia!!Occupied housing units!!Estimate',owner_col, renter_col]].iloc[2:15 , :]
tract_11001_df.head()



tract_11001_df[owner_col]=tract_11001_df[owner_col].replace(regex=[r'\D+'], value="")
tract_11001_df[renter_col] = tract_11001_df[renter_col].replace(regex=[r'\D+'], value="")
tract_11001_df = tract_11001_df.dropna(subset=[owner_col, renter_col])

tract_11001_df[owner_col] = tract_11001_df[owner_col].astype(int)
tract_11001_df[renter_col] = tract_11001_df[renter_col].astype(int)

tract_11001_df.head(9)


tract_11001_df = tract_11001_df.head(9)

import plotly.graph_objects as gp

y_income = list(tract_11001_df['Label (Grouping)'])
x_O = tract_11001_df[owner_col] * -1
x_R = tract_11001_df[renter_col] 


fig = gp.Figure()
  
# Adding owner data to the figure
fig.add_trace(gp.Bar(y= y_income, x = x_O, 
                     name = 'owner', 
                     orientation = 'h'))
  
# Adding renter data to the figure
fig.add_trace(gp.Bar(y = y_income, x = x_R,
                     name = 'renter', orientation = 'h'))
  
# Updating the layout for our graph
fig.update_layout(title = 'Unit Mean Income of Tract 110.01', barmode = 'relative',
                 title_font_size = 22,
                 bargap = 0.0, bargroupgap = 0,
                 xaxis = dict(tickvals = [-200, -150, -100, -50,
                                          0, 50, 100, 150, 200],
                                
                              ticktext = ['200', '150', '100','50', '0', 
                                          '50', '100', '150', '200'],
                                
                              title = 'Units',
                              title_font_size = 14)
                 )
  
fig.show()

owner_col = 'Census Tract 110.02, District of Columbia, District of Columbia!!Owner-occupied housing units!!Estimate'
renter_col = 'Census Tract 110.02, District of Columbia, District of Columbia!!Renter-occupied housing units!!Estimate'

tract_11002_df = finance_char_df[['Label (Grouping)', 'Census Tract 110.02, District of Columbia, District of Columbia!!Occupied housing units!!Estimate',owner_col, renter_col]].iloc[2:15 , :]
tract_11002_df.head()



tract_11002_df[owner_col]=tract_11002_df[owner_col].replace(regex=[r'\D+'], value="")
tract_11002_df[renter_col] = tract_11002_df[renter_col].replace(regex=[r'\D+'], value="")
tract_11002_df = tract_11002_df.dropna(subset=[owner_col, renter_col])

tract_11002_df[owner_col] = tract_11002_df[owner_col].astype(int)
tract_11002_df[renter_col] = tract_11002_df[renter_col].astype(int)

tract_11002_df.head(9)

tract_11002_df = tract_11002_df.head(9)

import plotly.graph_objects as gp

y_income = list(tract_11002_df['Label (Grouping)'])
x_O = tract_11002_df[owner_col] * -1
x_R = tract_11002_df[renter_col] 


fig = gp.Figure()
  
# Adding owner data to the figure
fig.add_trace(gp.Bar(y= y_income, x = x_O, 
                     name = 'owner', 
                     orientation = 'h'))
  
# Adding renter data to the figure
fig.add_trace(gp.Bar(y = y_income, x = x_R,
                     name = 'renter', orientation = 'h'))
  
# Updating the layout for our graph
fig.update_layout(title = 'Unit Mean Income of Tract 110.02', barmode = 'relative',
                 title_font_size = 22,
                 bargap = 0.0, bargroupgap = 0,
                 xaxis = dict(tickvals = [-200, -150, -100, -50,
                                          0, 50, 100, 150, 200],
                                
                              ticktext = ['200', '150', '100','50', '0', 
                                          '50', '100', '150', '200'],
                                
                              title = 'Units',
                              title_font_size = 14)
                 )
  
fig.show()